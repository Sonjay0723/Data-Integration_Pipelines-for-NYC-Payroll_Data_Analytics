{
	"name": "Data Summarization",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dbPayroll2020Sql",
						"type": "DatasetReference"
					},
					"name": "payroll2020Source"
				},
				{
					"dataset": {
						"referenceName": "dbPayroll2021Sql",
						"type": "DatasetReference"
					},
					"name": "payroll2021Source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dbPayrollSummarySql",
						"type": "DatasetReference"
					},
					"name": "sinkToSQL"
				},
				{
					"dataset": {
						"referenceName": "directoryStagingFolder",
						"type": "DatasetReference"
					},
					"name": "sinkToDirectory"
				}
			],
			"transformations": [
				{
					"name": "payrollUnion"
				},
				{
					"name": "renameAgencyCode"
				},
				{
					"name": "fiscalYearFilter"
				},
				{
					"name": "columnTotalPaid"
				},
				{
					"name": "aggregateYearAndAgency"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> payroll2020Source",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> payroll2021Source",
				"renameAgencyCode, payroll2021Source union(byName: true)~> payrollUnion",
				"payroll2020Source select(mapColumn(",
				"          FiscalYear,",
				"          PayrollNumber,",
				"          AgencyCode = AgencyID,",
				"          AgencyName,",
				"          EmployeeID,",
				"          LastName,",
				"          FirstName,",
				"          AgencyStartDate,",
				"          WorkLocationBorough,",
				"          TitleCode,",
				"          TitleDescription,",
				"          LeaveStatusasofJune30,",
				"          BaseSalary,",
				"          PayBasis,",
				"          RegularHours,",
				"          RegularGrossPaid,",
				"          OTHours,",
				"          TotalOTPaid,",
				"          TotalOtherPay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renameAgencyCode",
				"payrollUnion filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> fiscalYearFilter",
				"fiscalYearFilter derive(TotalPaid = RegularGrossPaid + TotalOTPaid + TotalOtherPay) ~> columnTotalPaid",
				"columnTotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> aggregateYearAndAgency",
				"aggregateYearAndAgency sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid",
				"     )) ~> sinkToSQL",
				"aggregateYearAndAgency sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sinkToDirectory"
			]
		}
	}
}